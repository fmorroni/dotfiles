#ARCHIVO MODIFICADO DEL ORIGINAL OBTENIDO EN
#https://github.com/ficoos/tgdbdb/tree/master
#A este archivo renÃ³mbrenlo como .tgdbinit y lo pueden usar en lugar del original.

python
import subprocess as sp

class Pane():
    class SplitDir():
        HORIZONTAL_RIGHT = '-h'
        HORIZONTAL_LEFT = '-hb'
        VERTICAL_ABOVE = '-vb'
        VERTICAL_BELOW = '-v'

    def __init__(self, id: str, tty: str, module_name: str, position: str | None = None, percentage: int = -1):
        self.id = id
        self.tty = tty
        self.module_name = module_name
        self.position = position
        self.percentage = percentage
        if module_name == 'dashboard':
            self.add_extra_module('')
        elif module_name != 'gdb':
            self.add_extra_module(module_name)

    def set_title(self):
        with open(self.tty, 'ab') as t:
            t.write(b'\x1b]2;' + self.module_name.encode('utf8') + b'\x1b\\')

    def split(self, dir = SplitDir.VERTICAL_ABOVE, percentage = 50, module_name = ''):
        NULLPROG = "sh -c 'while [ 1 = 1 ]; do sleep 100; done'"
        id, tty = Pane.tmux('split-window', '-l', f"{percentage}%", '-t', self.id, '-d', dir,
                             '-P', '-F', '#{pane_id},#{pane_tty}', NULLPROG)
        # self.check()
        return Pane(id, tty, module_name, dir, percentage)

    # def set_dashboard(self):
    #     gdb.execute(f'dashboard -output {self.tty}')

    def add_extra_module(self, module_name: str):
        gdb.execute(f'dashboard {module_name} -output {self.tty}')

    def check(self):
        sp.check_call(['stty', '--file', self.tty, '-echo'])

    @staticmethod
    def tmux(*args):
        # print(args)
        return sp.check_output(['tmux'] + list(args)).decode('utf8').strip().split(',')

    def __str__(self) -> str:
        return f"{self.module_name}: {{ id: {self.id}, tty: {self.tty} }}"


class Window(Pane):
    def __init__(self, module_name: str):
        id, tty = Window.create_window()
        Pane.__init__(self, id, tty, module_name)
        self.set_title()

    @staticmethod
    def create_window():
        Pane.tmux('setw', 'remain-on-exit', 'on')
        return Pane.tmux('display-message', '-p' , '-F', '#{pane_index},#{pane_tty}')

################### Layout ####################
# ---------------------------------------------
# |            |                   |          | 
# |            |                   |  Memory  | 
# |    GDB     |     Registers     |          | 
# |            |                   |----------| 
# |            |                   |          | 
# |--------------------------------|          | 
# |                |               |          | 
# |                |               |   Stack  | 
# |     Source     |   Assembly    |          | 
# |                |               |          | 
# |                |               |          | 
# |                |               |          | 
# ---------------------------------------------

gdb_window = Window('gdb')

# stack_pane_width = 35 if gdb.lookup_type('void').pointer().sizeof == 8 else 30
# print("Stack pane width: ", stack_pane_width, gdb.lookup_type('void').pointer().sizeof)
stack_pane = gdb_window.split(
        dir=Pane.SplitDir.HORIZONTAL_RIGHT,
        # percentage=stack_pane_width,
        percentage=35,
        module_name='stackmemory'
    )
stack_pane.add_extra_module('breakpoints')

memory_pane = stack_pane.split(
        dir=Pane.SplitDir.VERTICAL_ABOVE,
        percentage=30,
        module_name='memory'
    )
memory_pane.add_extra_module('threads')


source_pane = gdb_window.split(
        dir=Pane.SplitDir.VERTICAL_BELOW,
        percentage=55,
        module_name='source'
    )
# dashboard_pane.set_dashboard()
source_pane.add_extra_module('variables')

registers_pane = gdb_window.split(
        dir=Pane.SplitDir.HORIZONTAL_RIGHT,
        percentage=60,
        module_name='registers'
    )
registers_pane.add_extra_module('history')
registers_pane.add_extra_module('expressions')

assembly_pane = source_pane.split(
        dir=Pane.SplitDir.HORIZONTAL_RIGHT,
        percentage=50,
        module_name='assembly'
    )

#configuraciones que quiero tener siempre
gdb.execute(f'dashboard memory -style full True')

gdb.execute(f'dashboard registers -style column-major True')

gdb.execute(f'dashboard source -style height 0')
gdb.execute(f'dashboard assembly -style height 0')
gdb.execute(f'dashboard source -style highlight-line True')
gdb.execute(f'dashboard assembly -style highlight-line True')



gdb.execute(f'set debuginfod enabled on')
gdb.execute(f'set disassembly-flavor intel')


# Disable unwanted sections
# gdb.execute(f'dashboard breakpoints')
gdb.execute(f'dashboard threads')
# gdb.execute(f'dashboard variables')
gdb.execute(f'dashboard history')
gdb.execute(f'dashboard stack')

stmem = dashboard.modules[8].instance

def print_mem(mem):
    for i in range(0, len(mem), 4):
        print(mem[i : i+4])

def print_og_lat(frame):
    print_mem(frame.original)
    print_mem(frame.latest)

def get_frames():
    return list(stmem.frames.values())

def print_frames():
    for frame in stmem.frames.values():
        print(vars(frame))

class HidePane():
    def __init__(self, counterPart: str | None, hideId: str, showId: str, position: str, percentage: int):
        self.hidden = False
        self.counterPart = counterPart
        self.counterPartHidden = False
        self.info = ''
        self.hideId = hideId
        self.showId = showId
        self.position = position
        self.percentage = percentage


class Hide(gdb.Command):
    panes={
        'assembly': HidePane('source', assembly_pane.id, source_pane.id, Pane.SplitDir.HORIZONTAL_RIGHT, assembly_pane.percentage),
        'source': HidePane('assembly', source_pane.id, assembly_pane.id, Pane.SplitDir.HORIZONTAL_LEFT, 100 - assembly_pane.percentage),
        # 'console': HidePane(source_pane.id, assembly_pane.id, Pane.SplitDir.HORIZONTAL_LEFT),
        'registers': HidePane(None, registers_pane.id, gdb_window.id, Pane.SplitDir.HORIZONTAL_RIGHT, registers_pane.percentage),
        'memory': HidePane('stack', memory_pane.id, stack_pane.id, Pane.SplitDir.VERTICAL_ABOVE, memory_pane.percentage),
        'stack': HidePane('memory', stack_pane.id, memory_pane.id, Pane.SplitDir.VERTICAL_BELOW, 100 - memory_pane.percentage),
        # 'mem-stack': HidePane(None, '', '', Pane.SplitDir.HORIZONTAL_RIGHT, stack_pane.percentage),
    }

    def __init__(self):
        super(Hide, self).__init__("hide", gdb.COMMAND_USER)

    def invoke(self, arg, fromtty):
        if arg not in Hide.panes.keys():
            print('Chosse one of: ', Hide.panes.keys())
            return

        if arg == 'mem-stack':

            return

        hidePane = Hide.panes[arg]
        counterPartPane =  Hide.panes[hidePane.counterPart] if hidePane.counterPart else None
        # if arg == 'mem-stack':
        #     if hidePane.hidden:
        #         Pane.tmux('join-pane', hidePane.position, '-l', f"{hidePane.percentage}%",
        #                   '-s', hidePane.info, '-t', hidePane.showId)
        #         hidePane.hidden = False
        #     else:
        #         [hidePane.info] = Pane.tmux('break-pane', '-dPs', hidePane.hideId)
        #         hidePane.hidden = True
        #     return
        if hidePane.hidden:
            Pane.tmux('join-pane', hidePane.position, '-l', f"{hidePane.percentage}%",
                      '-s', hidePane.info, '-t', hidePane.showId)
            hidePane.hidden = False
            if counterPartPane:
                counterPartPane.counterPartHidden = False
            Pane.tmux('select-pane', '-t', '0')
        elif not hidePane.counterPartHidden:
            [hidePane.info] = Pane.tmux('break-pane', '-dPs', hidePane.hideId)
            hidePane.hidden = True
            if counterPartPane:
                counterPartPane.counterPartHidden = True
        else:
            # print(f"Can't hide {arg} when {hidePane.counterPart} is already hidden")
            self.invoke(hidePane.counterPart, '')
            self.invoke(arg, '')

        gdb.execute('dashboard')

    def complete(self, arguments_string, last):
        return [arg for arg in Hide.panes.keys() if arg.startswith(arguments_string)]

Hide()

end

# make sure dashboard output is updated when gdb state changes
define hookpost-up
    dashboard
end
define hookpost-down
    dashboard
end
define hookpost-thread
    dashboard
end
define hookpost-delete
    dashboard
end
define hookpost-clear
    dashboard
end
define hookpost-break
    dashboard
end

# vim: set ft=python:
